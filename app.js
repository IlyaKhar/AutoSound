// ===== –ì–õ–ê–í–ù–´–ô –§–ê–ô–õ –ü–†–ò–õ–û–ñ–ï–ù–ò–Ø =====

const express = require('express');
const cors = require('cors');
const helmet = require('helmet');
const compression = require('compression');
const morgan = require('morgan');
const rateLimit = require('express-rate-limit');
const path = require('path');

// –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
require('dotenv').config({ path: './config.env' });
const config = require('./src/config/app');
const connectDB = require('./src/config/database');

// –ò–º–ø–æ—Ä—Ç –º–∞—Ä—à—Ä—É—Ç–æ–≤
const authRoutes = require('./src/routes/auth');
const userRoutes = require('./src/routes/users');
const articleRoutes = require('./src/routes/articles');
const categoryRoutes = require('./src/routes/categories');
const commentRoutes = require('./src/routes/comments');
const adminRoutes = require('./src/routes/admin');

// –ò–º–ø–æ—Ä—Ç middleware
const errorHandler = require('./src/middleware/errorHandler');
const { authenticateToken } = require('./src/middleware/auth');

const app = express();

// ===== TRUST PROXY (–í–ê–ñ–ù–û –î–õ–Ø VERCEL) =====
app.set('trust proxy', true);

// ===== –ü–û–î–ö–õ–Æ–ß–ï–ù–ò–ï –ö –ë–ê–ó–ï –î–ê–ù–ù–´–• =====
connectDB();

// ===== MIDDLEWARE =====

// –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å
app.use(helmet({
    contentSecurityPolicy: false, // –í—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á–∞–µ–º CSP –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
    crossOriginEmbedderPolicy: false
}));

// CORS
app.use(cors(config.cors));

// –°–∂–∞—Ç–∏–µ
app.use(compression());

// –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
app.use(morgan('combined'));

// Rate limiting
const limiter = rateLimit({
    windowMs: config.security.rateLimitWindow * 60 * 1000,
    max: config.security.rateLimitMax,
    message: {
        error: '–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤ —Å —ç—Ç–æ–≥–æ IP, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ'
    }
});
app.use('/api/', limiter);

// –ü–∞—Ä—Å–∏–Ω–≥ JSON
app.use(express.json({ limit: '10mb' }));
app.use(express.urlencoded({ extended: true, limit: '10mb' }));

// –°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ñ–∞–π–ª—ã —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ MIME-—Ç–∏–ø–∞–º–∏ –∏ –æ—Ç–ª–∞–¥–∫–æ–π
app.use('/uploads', express.static(config.paths.uploads, {
    setHeaders: (res, filePath) => {
        res.setHeader('Cache-Control', 'no-cache, no-store, must-revalidate');
    }
}));

// –û—Ç–ª–∞–¥–∫–∞ –ø—É—Ç–µ–π
app.use('/css', express.static(config.paths.public + '/css', {
    setHeaders: (res, filePath) => {
        res.setHeader('Content-Type', 'text/css');
        res.setHeader('Cache-Control', 'no-cache, no-store, must-revalidate');
        console.log('üìÑ Serving CSS:', filePath);
    }
}));

app.use('/js', express.static(config.paths.public + '/js', {
    setHeaders: (res, filePath) => {
        res.setHeader('Content-Type', 'application/javascript');
        res.setHeader('Cache-Control', 'no-cache, no-store, must-revalidate');
    }
}));

app.use('/images', express.static(config.paths.public + '/images', {
    setHeaders: (res, filePath) => {
        res.setHeader('Cache-Control', 'no-cache, no-store, must-revalidate');
    }
}));

// –í—Å–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ñ–∞–π–ª—ã
app.use(express.static(config.paths.public, {
    setHeaders: (res, filePath) => {
        if (filePath.endsWith('.css')) {
            res.setHeader('Content-Type', 'text/css');
        }
        if (filePath.endsWith('.js')) {
            res.setHeader('Content-Type', 'application/javascript');
        }
        res.setHeader('Cache-Control', 'no-cache, no-store, must-revalidate');
    }
}));

// ===== –ú–ê–†–®–†–£–¢–´ =====

// API –º–∞—Ä—à—Ä—É—Ç—ã
app.use('/api/auth', authRoutes);
app.use('/api/users', authenticateToken, userRoutes);
app.use('/api/articles', articleRoutes);
app.use('/api/categories', categoryRoutes);
app.use('/api/comments', commentRoutes);
app.use('/api/admin', authenticateToken, adminRoutes);

// –ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
app.get('/', (req, res) => {
    res.sendFile(path.join(config.paths.views, 'pages', 'index.html'));
});

// –°—Ç—Ä–∞–Ω–∏—Ü—ã
app.get('/main', (req, res) => {
    res.sendFile(path.join(config.paths.views, 'pages', 'main.html'));
});

app.get('/profile', (req, res) => {
    res.sendFile(path.join(config.paths.views, 'pages', 'profile.html'));
});

app.get('/admin', (req, res) => {
    res.sendFile(path.join(config.paths.views, 'pages', 'admin.html'));
});

app.get('/categories', (req, res) => {
    res.sendFile(path.join(config.paths.views, 'pages', 'categories.html'));
});

app.get('/news', (req, res) => {
    res.sendFile(path.join(config.paths.views, 'pages', 'news.html'));
});

app.get('/rating', (req, res) => {
    res.sendFile(path.join(config.paths.views, 'pages', 'rating.html'));
});

app.get('/login', (req, res) => {
    res.sendFile(path.join(config.paths.views, 'pages', 'login.html'));
});

app.get('/register', (req, res) => {
    res.sendFile(path.join(config.paths.views, 'pages', 'register.html'));
});

app.get('/settings', (req, res) => {
    res.sendFile(path.join(config.paths.views, 'pages', 'settings.html'));
});

app.get('/about', (req, res) => {
    res.sendFile(path.join(config.paths.views, 'pages', 'about.html'));
});

app.get('/contacts', (req, res) => {
    res.sendFile(path.join(config.paths.views, 'pages', 'contacts.html'));
});

app.get('/terms', (req, res) => {
    res.sendFile(path.join(config.paths.views, 'pages', 'terms.html'));
});

app.get('/policy', (req, res) => {
    res.sendFile(path.join(config.paths.views, 'pages', 'policy.html'));
});

app.get('/autozvuk', (req, res) => {
    res.sendFile(path.join(config.paths.views, 'pages', 'autozvuk.html'));
});

// API —Å—Ç–∞—Ç—É—Å
app.get('/api/status', (req, res) => {
    res.json({
        status: 'OK',
        timestamp: new Date().toISOString(),
        version: '1.0.0',
        environment: config.nodeEnv
    });
});

// 404 –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
app.use('*', (req, res) => {
    res.status(404).json({
        error: '–°—Ç—Ä–∞–Ω–∏—Ü–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞',
        path: req.originalUrl
    });
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
app.use(errorHandler);

// ===== –ó–ê–ü–£–°–ö –°–ï–†–í–ï–†–ê =====

const PORT = config.port;

app.listen(PORT, () => {
    console.log(`üöÄ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}`);
    console.log(`üì± –õ–æ–∫–∞–ª—å–Ω—ã–π –∞–¥—Ä–µ—Å: http://localhost:${PORT}`);
    console.log(`üåç –û–∫—Ä—É–∂–µ–Ω–∏–µ: ${config.nodeEnv}`);
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –æ—à–∏–±–æ–∫
process.on('unhandledRejection', (err) => {
    console.error('‚ùå –ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞:', err);
    process.exit(1);
});

process.on('uncaughtException', (err) => {
    console.error('‚ùå –ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ:', err);
    process.exit(1);
});

module.exports = app;
