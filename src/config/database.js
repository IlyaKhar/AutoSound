// ===== –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø –ë–ê–ó–´ –î–ê–ù–ù–´–• =====

const mongoose = require('mongoose');

const connectDB = async () => {
    try {
        const conn = await mongoose.connect(process.env.MONGODB_URI || 'mongodb://localhost:27017/autosound', {
            serverSelectionTimeoutMS: 30000, // –¢–∞–π–º–∞—É—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è 30 —Å–µ–∫—É–Ω–¥
            socketTimeoutMS: 45000, // –¢–∞–π–º–∞—É—Ç —Å–æ–∫–µ—Ç–∞
            connectTimeoutMS: 30000, // –¢–∞–π–º–∞—É—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
            maxPoolSize: 10, // –ú–∞–∫—Å–∏–º—É–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π –≤ –ø—É–ª–µ
            minPoolSize: 0, // –ú–∏–Ω–∏–º—É–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π –≤ –ø—É–ª–µ (0 –¥–ª—è Serverless)
            retryWrites: true,
            w: 'majority'
        });

        console.log(`‚úÖ MongoDB –ø–æ–¥–∫–ª—é—á–µ–Ω–∞: ${conn.connection.host}`);
        
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
        mongoose.connection.on('error', (err) => {
            console.error('‚ùå –û—à–∏–±–∫–∞ MongoDB:', err);
        });

        mongoose.connection.on('disconnected', () => {
            console.log('‚ö†Ô∏è MongoDB –æ—Ç–∫–ª—é—á–µ–Ω–∞');
        });

        // Graceful shutdown
        process.on('SIGINT', async () => {
            await mongoose.connection.close();
            console.log('üîå MongoDB —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ');
            process.exit(0);
        });

    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ MongoDB:', error.message);
        console.log('‚ö†Ô∏è –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ä–∞–±–æ—Ç—É –±–µ–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...');
        // –ù–µ –∑–∞–≤–µ—Ä—à–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ä–∞–±–æ—Ç—É –±–µ–∑ –ë–î
    }
};

module.exports = connectDB;
